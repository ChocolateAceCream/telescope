// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: oauth.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const googleLogin = `-- name: GoogleLogin :exec
INSERT INTO google_logins (email, username, access_token, issued_at, expired_at)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (email) DO UPDATE
SET
  username = EXCLUDED.username,
  access_token = EXCLUDED.access_token,
  issued_at = EXCLUDED.issued_at,
  expired_at = EXCLUDED.expired_at
`

type GoogleLoginParams struct {
	Email       string
	Username    string
	AccessToken string
	IssuedAt    pgtype.Timestamp
	ExpiredAt   pgtype.Timestamp
}

func (q *Queries) GoogleLogin(ctx context.Context, arg GoogleLoginParams) error {
	_, err := q.db.Exec(ctx, googleLogin,
		arg.Email,
		arg.Username,
		arg.AccessToken,
		arg.IssuedAt,
		arg.ExpiredAt,
	)
	return err
}

const googleLoginUpdateUser = `-- name: GoogleLoginUpdateUser :exec
INSERT INTO users (username, email, info)
VALUES (
  $1, -- username
  $2, -- email
  $3  -- info
)
ON CONFLICT (email) DO UPDATE
SET
  username = COALESCE(users.username,EXCLUDED.username),
  info = users.info || EXCLUDED.info
`

type GoogleLoginUpdateUserParams struct {
	Username string
	Email    string
	Info     []byte
}

func (q *Queries) GoogleLoginUpdateUser(ctx context.Context, arg GoogleLoginUpdateUserParams) error {
	_, err := q.db.Exec(ctx, googleLoginUpdateUser, arg.Username, arg.Email, arg.Info)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: sketch.sql

package db

import (
	"context"
)

const getSketchesByProjectID = `-- name: GetSketchesByProjectID :many
select id, project_name, comment, project_id, uploader_id, thumbnail_url, full_image_url, created_at, updated_at from sketch
where sketch.project_id = $1
`

func (q *Queries) GetSketchesByProjectID(ctx context.Context, projectID int32) ([]Sketch, error) {
	rows, err := q.db.Query(ctx, getSketchesByProjectID, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sketch
	for rows.Next() {
		var i Sketch
		if err := rows.Scan(
			&i.ID,
			&i.ProjectName,
			&i.Comment,
			&i.ProjectID,
			&i.UploaderID,
			&i.ThumbnailUrl,
			&i.FullImageUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newSketch = `-- name: NewSketch :one
insert into sketch (project_name, project_id, uploader_id, full_image_url)
values (
  $1,
  $2,
  $3,
  $4
)
returning id, project_name, comment, project_id, uploader_id, thumbnail_url, full_image_url, created_at, updated_at
`

type NewSketchParams struct {
	ProjectName  string
	ProjectID    int32
	UploaderID   int32
	FullImageUrl string
}

func (q *Queries) NewSketch(ctx context.Context, arg NewSketchParams) (Sketch, error) {
	row := q.db.QueryRow(ctx, newSketch,
		arg.ProjectName,
		arg.ProjectID,
		arg.UploaderID,
		arg.FullImageUrl,
	)
	var i Sketch
	err := row.Scan(
		&i.ID,
		&i.ProjectName,
		&i.Comment,
		&i.ProjectID,
		&i.UploaderID,
		&i.ThumbnailUrl,
		&i.FullImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

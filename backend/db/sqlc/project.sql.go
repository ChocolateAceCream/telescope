// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: project.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getProjectByID = `-- name: GetProjectByID :one
SELECT id, project_name, comment, creator, status, address, created_at, updated_at FROM project
WHERE id = $1
`

func (q *Queries) GetProjectByID(ctx context.Context, id int32) (Project, error) {
	row := q.db.QueryRow(ctx, getProjectByID, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.ProjectName,
		&i.Comment,
		&i.Creator,
		&i.Status,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProjectByName = `-- name: GetProjectByName :one
select id, project_name, comment, creator, status, address, created_at, updated_at from project
where project_name = $1
`

func (q *Queries) GetProjectByName(ctx context.Context, projectName string) (Project, error) {
	row := q.db.QueryRow(ctx, getProjectByName, projectName)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.ProjectName,
		&i.Comment,
		&i.Creator,
		&i.Status,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProjectList = `-- name: GetProjectList :many
EXECUTE format(
  '
  SELECT *
  FROM project
  ORDER BY %I %s
  LIMIT %s OFFSET %s',
  $1,
  $2,
  $3,
  $4
)
`

type GetProjectListParams struct {
	OrderBy interface{}
	SortBy  interface{}
	Limit   interface{}
	Offset  interface{}
}

type GetProjectListRow struct {
}

func (q *Queries) GetProjectList(ctx context.Context, arg GetProjectListParams) ([]GetProjectListRow, error) {
	rows, err := q.db.Query(ctx, getProjectList,
		arg.OrderBy,
		arg.SortBy,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProjectListRow
	for rows.Next() {
		var i GetProjectListRow
		if err := rows.Scan(); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectPageInfo = `-- name: GetProjectPageInfo :one
SELECT (
    SELECT COUNT(*)
    FROM project
  ) AS total_items,
  CEIL(COUNT(*)::FLOAT / $1) AS total_pages
FROM project
`

type GetProjectPageInfoRow struct {
	TotalItems int64
	TotalPages float64
}

func (q *Queries) GetProjectPageInfo(ctx context.Context, dollar_1 interface{}) (GetProjectPageInfoRow, error) {
	row := q.db.QueryRow(ctx, getProjectPageInfo, dollar_1)
	var i GetProjectPageInfoRow
	err := row.Scan(&i.TotalItems, &i.TotalPages)
	return i, err
}

const getTotalProjectCount = `-- name: GetTotalProjectCount :one
SELECT COUNT(*) FROM project
`

func (q *Queries) GetTotalProjectCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalProjectCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const newProject = `-- name: NewProject :one
insert into project (project_name, comment, creator, status, address)
values(
  $1,
  $2,
  $3,
  $4,
  $5
)
returning id, project_name, comment, creator, status, address, created_at, updated_at
`

type NewProjectParams struct {
	ProjectName string
	Comment     pgtype.Text
	Creator     int32
	Status      pgtype.Text
	Address     pgtype.Text
}

func (q *Queries) NewProject(ctx context.Context, arg NewProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, newProject,
		arg.ProjectName,
		arg.Comment,
		arg.Creator,
		arg.Status,
		arg.Address,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.ProjectName,
		&i.Comment,
		&i.Creator,
		&i.Status,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProject = `-- name: UpdateProject :one
UPDATE project
SET project_name = $1,
  comment = $2,
  status = $3,
  address = $4,
  updated_at = now()
WHERE id = $5
RETURNING id, project_name, comment, creator, status, address, created_at, updated_at
`

type UpdateProjectParams struct {
	ProjectName string
	Comment     pgtype.Text
	Status      pgtype.Text
	Address     pgtype.Text
	ID          int32
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProject,
		arg.ProjectName,
		arg.Comment,
		arg.Status,
		arg.Address,
		arg.ID,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.ProjectName,
		&i.Comment,
		&i.Creator,
		&i.Status,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

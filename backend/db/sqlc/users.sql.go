// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package db

import (
	"context"
)

const findUserByUsername = `-- name: FindUserByUsername :exec
SELECT id, username, email, password, role, created_at, updated_at
FROM a_users
WHERE username = $1
`

func (q *Queries) FindUserByUsername(ctx context.Context, username string) error {
	_, err := q.db.Exec(ctx, findUserByUsername, username)
	return err
}

const getUserByUsername = `-- name: GetUserByUsername :one
select id, username, email, password, role, created_at, updated_at FROM a_users where username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (AUser, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i AUser
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const initUsers = `-- name: InitUsers :exec
insert into a_users (username, password, email, role)
values (
    'superadmin',
    encode(digest($1, 'sha256'), 'hex'),
    'superadmin@superadmin.com',
    'super_admin'
  ),
  (
    'admin',
    encode(digest($1, 'sha256'), 'hex'),
    'admin@admin.com',
    'admin'
  ) on conflict(username) do
update
SET password = excluded.password,
  email = excluded.email,
  role = excluded.role
`

func (q *Queries) InitUsers(ctx context.Context, digest string) error {
	_, err := q.db.Exec(ctx, initUsers, digest)
	return err
}

const verifyUserCredentials = `-- name: VerifyUserCredentials :one
select exists (
    select 1
    from a_users
    where username = $1
      and password = $2
  ) as valid
`

type VerifyUserCredentialsParams struct {
	Username string
	Password string
}

func (q *Queries) VerifyUserCredentials(ctx context.Context, arg VerifyUserCredentialsParams) (bool, error) {
	row := q.db.QueryRow(ctx, verifyUserCredentials, arg.Username, arg.Password)
	var valid bool
	err := row.Scan(&valid)
	return valid, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: email_whitelist.sql

package db

import (
	"context"
)

const addEmailWhitelist = `-- name: AddEmailWhitelist :exec
INSERT INTO email_whitelist (email)
VALUES ($1)
ON CONFLICT (email) DO NOTHING
`

func (q *Queries) AddEmailWhitelist(ctx context.Context, email string) error {
	_, err := q.db.Exec(ctx, addEmailWhitelist, email)
	return err
}

const deleteEmailWhitelist = `-- name: DeleteEmailWhitelist :exec
DELETE FROM email_whitelist
WHERE email = $1
`

func (q *Queries) DeleteEmailWhitelist(ctx context.Context, email string) error {
	_, err := q.db.Exec(ctx, deleteEmailWhitelist, email)
	return err
}

const getEmailWhitelist = `-- name: GetEmailWhitelist :many
select email
from email_whitelist
`

func (q *Queries) GetEmailWhitelist(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getEmailWhitelist)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var email string
		if err := rows.Scan(&email); err != nil {
			return nil, err
		}
		items = append(items, email)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const initEmailWhitelist = `-- name: InitEmailWhitelist :exec
insert into email_whitelist (email)
values ('vincewang0101@gmail.com'),
  ('nuodi@hotmail.com'),
  ('kittyjune330@gmail.com'),
  ('ajvalino09@gmail.com'),
  ('superadmin@superadmin.com'),
  ('admin@admin.com'),
  ('liuguoxinn87@gmail.com')
ON CONFLICT (email) DO NOTHING
`

func (q *Queries) InitEmailWhitelist(ctx context.Context) error {
	_, err := q.db.Exec(ctx, initEmailWhitelist)
	return err
}

const verifyEmailWhitelistExist = `-- name: VerifyEmailWhitelistExist :one
SELECT EXISTS (
    SELECT 1
    FROM email_whitelist
    WHERE email = $1
  ) AS exists
`

func (q *Queries) VerifyEmailWhitelistExist(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, verifyEmailWhitelistExist, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
